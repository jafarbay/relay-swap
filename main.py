import aiohttp
import asyncio
from web3 import Web3
from eth_account import Account
import time
import random

# ==== –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ==== 
config = {
    'rpc_node': "https://unichain-rpc.publicnode.com",  # RPC UniChain (Chain ID 130)
    'private_key': "",  # üîë –£–∫–∞–∂–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
    'from_chain': 130,  # –ò—Å—Ö–æ–¥–Ω—ã–π Chain ID
    'to_chain': 130,  # –¶–µ–ª–µ–≤–æ–π Chain ID
    'from_token_address': "0x0000000000000000000000000000000000000000",  # –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–π —Ü–µ–ø–∏ (ETH, –Ω–∞–ø—Ä–∏–º–µ—Ä)
    'to_token_address': "0x078d782b760474a361dda0af3839290b0ef57ad6",  # –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ —Ü–µ–ª–µ–≤–æ–π —Ü–µ–ø–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDC)
    'slippage_tolerance': '1',  # –î–æ–ø—É—Å—Ç–∏–º–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
    'swap_back': True,  # –ï—Å–ª–∏ True, –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –æ–±–º–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ (USDC ‚Üí ETH)
    'random_delay_range': (3, 7),  # –î–∏–∞–ø–∞–∑–æ–Ω —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
}

# ==== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ==== 
web3 = Web3(Web3.HTTPProvider(config['rpc_node']))
account = Account.from_key(config['private_key'])

# ==== –¶–≤–µ—Ç–Ω—ã–µ –ª–æ–≥–∏ ==== 
def log(msg, color="white"):
    colors = {
        "red": "\033[91m",
        "green": "\033[92m",
        "yellow": "\033[93m",
        "cyan": "\033[96m",
        "white": "\033[97m",
        "reset": "\033[0m"
    }
    print(f"{colors.get(color, colors['white'])}{msg}{colors['reset']}")

# ==== –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —ç—Ñ–∏—Ä–∞ ==== 
def get_balance(account):
    balance = web3.eth.get_balance(account.address)
    return balance, web3.from_wei(balance, 'ether')

# ==== –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–∞ ==== 
def get_token_balance(account, token_address):
    token_address = Web3.to_checksum_address(token_address)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–¥—Ä–µ—Å –≤ —á–µ–∫—Å—É–º–∞
    abi = [{
        "constant": True,
        "inputs": [{"name": "_owner", "type": "address"}],
        "name": "balanceOf",
        "outputs": [{"name": "", "type": "uint256"}],
        "payable": False,
        "stateMutability": "view",
        "type": "function"
    }]
    contract = web3.eth.contract(address=token_address, abi=abi)
    balance = contract.functions.balanceOf(account.address).call()
    return balance  # –≤ 6 –∑–Ω–∞–∫–∞—Ö


# ==== –†–∞—Å—á—ë—Ç –¥–æ–ª–∏ –±–∞–ª–∞–Ω—Å–∞ ==== 
def get_eth_to_swap(account):
    balance, _ = get_balance(account)
    portion = int(balance * 0.2)
    return portion, web3.from_wei(portion, 'ether')

def get_usdc_to_swap(account):
    balance = get_token_balance(account, config['to_token_address'])
    portion = int(balance)
    return portion, portion / 10**6  # –≤ "–Ω–æ—Ä–º–∞–ª—å–Ω–æ–º" —Ñ–æ—Ä–º–∞—Ç–µ

# ==== –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ ==== 
async def get_quote(account, from_token, to_token, amount):
    url = "https://api.relay.link/quote"
    headers = {
        'accept': 'application/json, text/plain, */*',
        'user-agent': 'Mozilla/5.0'
    }
    json_data = {
        'user': account.address.lower(),
        'originChainId': config['from_chain'],
        'destinationChainId': config['to_chain'],
        'originCurrency': from_token,
        'destinationCurrency': to_token,
        'recipient': account.address,
        'tradeType': 'EXACT_INPUT',
        'amount': str(amount),
        'referrer': 'relay.link/swap',
        'slippageTolerance': config['slippage_tolerance'],
        'useExternalLiquidity': False,
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=json_data) as response:
            if response.status == 200:
                return await response.json()
            else:
                text = await response.text()
                log(f"‚ùå –û—à–∏–±–∫–∞ API: {text}", "red")
                return None

# ==== –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ quote (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ) ==== 
async def send_transaction_bundle(account, quote_data):
    try:
        all_steps = quote_data['steps']
    except KeyError as e:
        log(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ quote: {e}", "red")
        return False

    nonce = web3.eth.get_transaction_count(account.address)
    step_idx = 0

    for step in all_steps:
        step_items = step.get('items', [])
        for idx, item in enumerate(step_items):
            tx_data = item.get('data')
            if not tx_data:
                log(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (step {step_idx}, item {idx})", "yellow")
                continue

            try:
                tx = {
                    'from': account.address,
                    'to': Web3.to_checksum_address(tx_data['to']),
                    'value': int(tx_data['value']),
                    'data': tx_data['data'],
                    'chainId': int(tx_data['chainId']),
                    'maxFeePerGas': int(tx_data['maxFeePerGas']),
                    'maxPriorityFeePerGas': int(tx_data['maxPriorityFeePerGas']),
                    'nonce': nonce,
                    'type': 2
                }

                gas_estimate = web3.eth.estimate_gas(tx)
                tx['gas'] = int(gas_estimate * 1.1)

                signed = web3.eth.account.sign_transaction(tx, config['private_key'])
                tx_hash = web3.eth.send_raw_transaction(signed.raw_transaction)

                log(f"üöÄ [{step_idx+1}.{idx+1}] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {tx_hash.hex()}", "cyan")

                receipt = web3.eth.wait_for_transaction_receipt(tx_hash)
                if receipt['status'] == 1:
                    log(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {tx_hash.hex()}", "green")
                else:
                    log(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {tx_hash.hex()}", "red")
                    return False

                nonce += 1

                # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
                delay = random.randint(config['random_delay_range'][0], config['random_delay_range'][1])
                log(f"‚è≥ –ó–∞–¥–µ—Ä–∂–∫–∞: {delay} —Å–µ–∫.", "yellow")
                time.sleep(delay)

            except Exception as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}", "red")
                return False

        step_idx += 1

    return True

# ==== –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å ==== 
async def main():
    current_time = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())
    log(f"üïí {current_time} - –°—Ç–∞—Ä—Ç –¥–ª—è –∞–¥—Ä–µ—Å–∞: {account.address}", "white")

    balance_wei, balance_eth = get_balance(account)
    if balance_eth < 0.00001:
        log(f"‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å ETH —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π ({balance_eth} ETH)", "yellow")
        return

    # === ETH ‚Üí USDC === 
    eth_amount, eth_view = get_eth_to_swap(account)
    if eth_amount < 10**13:  # –º–µ–Ω—å—à–µ 0.00001 ETH
        log("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH –¥–ª—è —Å–≤–∞–ø–∞", "yellow")
    else:
        log(f"üîÅ ETH ‚Üí USDC: {eth_view} ETH", "cyan")
        quote = await get_quote(account, config['from_token_address'], config['to_token_address'], eth_amount)
        if quote:
            await send_transaction_bundle(account, quote)
        else:
            log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É ETH ‚Üí USDC", "red")

    if config['swap_back']:  # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ñ–ª–∞–≥ –æ–±–º–µ–Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ
        time.sleep(10)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±–º–µ–Ω–æ–º –æ–±—Ä–∞—Ç–Ω–æ

        # === USDC ‚Üí ETH === 
        usdc_amount, usdc_view = get_usdc_to_swap(account)
        if usdc_amount < 10000:  # –º–µ–Ω—å—à–µ 0.01 USDC
            log("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ USDC –¥–ª—è —Å–≤–∞–ø–∞", "yellow")
        else:
            log(f"üîÅ USDC ‚Üí ETH: {usdc_view} USDC", "cyan")
            quote = await get_quote(account, config['to_token_address'], config['from_token_address'], usdc_amount)
            if quote:
                await send_transaction_bundle(account, quote)
            else:
                log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫—É USDC ‚Üí ETH", "red")

# ==== –ó–∞–ø—É—Å–∫ ==== 
if __name__ == "__main__":
    asyncio.run(main())
